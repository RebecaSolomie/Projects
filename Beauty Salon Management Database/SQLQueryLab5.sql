use [BeautySalon]
DROP TABLE IF EXISTS Appointmentss;
DROP TABLE IF EXISTS Servicess;
DROP TABLE IF EXISTS Customerss;
DROP PROCEDURE IF EXISTS populateTableCustomers;
DROP PROCEDURE IF EXISTS populateTableServices;
DROP PROCEDURE IF EXISTS populateTableAppointments;
GO

-- Customers table with a unique column for email or customer ID
CREATE TABLE Customerss (
    customer_id INT NOT NULL,
    name NVARCHAR(100) NOT NULL,
    email NVARCHAR(100) NOT NULL,
    PRIMARY KEY (customer_id),
    UNIQUE (email)
);
GO

-- Services table, which lists available beauty services
CREATE TABLE Servicess (
    service_id INT NOT NULL,
    service_name NVARCHAR(100) NOT NULL,
    price DECIMAL(10, 2) NOT NULL,
    PRIMARY KEY (service_id)
);
GO

-- Appointments table, linking Customers and Services
CREATE TABLE Appointmentss (
    appointment_id INT NOT NULL,
    customer_id INT NOT NULL,
    service_id INT NOT NULL,
    appointment_date DATETIME NOT NULL,
    PRIMARY KEY (appointment_id),
    FOREIGN KEY (customer_id) REFERENCES Customerss(customer_id),
    FOREIGN KEY (service_id) REFERENCES Servicess(service_id)
);
GO

-- Procedure to populate the Customers table
CREATE PROCEDURE populateTableCustomerss(@rows INT) AS
BEGIN
    WHILE @rows > 0 BEGIN
        INSERT INTO Customerss 
        VALUES (@rows, CONCAT('Customer', @rows), CONCAT('customer', @rows, '@example.com'));
        SET @rows = @rows - 1;
    END;
END;
GO

-- Procedure to populate the Services table
CREATE PROCEDURE populateTableServicess(@rows INT) AS
BEGIN
    WHILE @rows > 0 BEGIN
        INSERT INTO Servicess 
        VALUES (@rows, CONCAT('Service', @rows), @rows * 10.00);
        SET @rows = @rows - 1;
    END;
END;
GO

-- Procedure to populate the Appointments table
CREATE PROCEDURE populateTableAppointmentss(@rows INT) AS
BEGIN
    IF @rows > (SELECT COUNT(*) FROM Customerss) * (SELECT COUNT(*) FROM Servicess) BEGIN
        RAISERROR ('Too many entities requested', 10, 1);
        RETURN;
    END;

    DECLARE valuesCursor CURSOR LOCAL FOR (
        SELECT c.customer_id, s.service_id
        FROM Customerss c CROSS JOIN Servicess s
    );

    DECLARE @customer_id INT;
    DECLARE @service_id INT;

    OPEN valuesCursor;
    FETCH valuesCursor INTO @customer_id, @service_id;

    WHILE @@FETCH_STATUS = 0 AND @rows > 0 BEGIN
        INSERT INTO Appointmentss 
        VALUES (@rows, @customer_id, @service_id, GETDATE() - @rows);
        FETCH valuesCursor INTO @customer_id, @service_id;
        SET @rows = @rows - 1;
    END;

    CLOSE valuesCursor;
    DEALLOCATE valuesCursor;
END;
GO

-- Populate the tables with sample data
EXEC populateTableCustomerss 10000;
EXEC populateTableServicess 100;
EXEC populateTableAppointmentss 5000;



-- Clustered index scan
IF EXISTS (SELECT * FROM sys.indexes WHERE name = 'index1')
    DROP INDEX index1 ON Customerss;
CREATE NONCLUSTERED INDEX index1 ON Customerss(email);
SELECT * FROM Customerss ORDER BY customer_id; -- 0.097

-- Clustered index seek
SELECT * FROM Customerss WHERE customer_id = 100; -- 0.003

-- Nonclustered index scan
SELECT email FROM Customerss; -- 0.070

-- Nonclustered index seek + Key lookup
SELECT * FROM Customerss WHERE email = 'customer14@example.com'; -- 0.006



-- Indexing for Services
IF EXISTS (SELECT * FROM sys.indexes WHERE name = 'index2')
    DROP INDEX index2 ON Servicess;

SELECT * FROM Servicess WHERE price = 100.00; -- Without index -- 0.0033
CREATE NONCLUSTERED INDEX index2 ON Servicess(price);
SELECT * FROM Servicess WHERE price = 100.00; -- With index -- 0.0033



GO
-- View to calculate the total revenue generated by each service
CREATE OR ALTER VIEW viewRevenueByService AS
    SELECT a.service_id, s.service_name, SUM(s.price) AS total_revenue
    FROM Appointmentss a
    INNER JOIN Servicess s ON a.service_id = s.service_id
    INNER JOIN Customerss c ON a.customer_id = c.customer_id
    WHERE c.customer_id <= 10000 AND s.price <= 500.00
    GROUP BY a.service_id, s.service_name;
GO

SELECT * FROM viewRevenueByService; -- Without indexes -- 0.4038
IF EXISTS (SELECT * FROM sys.indexes WHERE name = 'index1')
    DROP INDEX index1 ON Customerss;
IF EXISTS (SELECT * FROM sys.indexes WHERE name = 'index2')
    DROP INDEX index2 ON Servicess;


-- Recreate indexes
CREATE NONCLUSTERED INDEX index1 ON Customerss(email);
CREATE NONCLUSTERED INDEX index2 ON Servicess(price);
SELECT * FROM viewRevenueByService; -- With indexes -- 0.4038
